Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.

For example, given n = 3, a solution set is:

[
  "((()))",
  "(()())",
  "(())()",
  "()(())",
  "()()()"
]







class Solution(object):
    def generateParenthesis(self, n):
        """
        :type n: int
        :rtype: List[str]
        """
    
        self.ans=[]
        self.n=n
        self.helper(0,0,'',0)
    
        return self.ans


    def helper(self,i,j,path,num):
        if i<self.n and num+1>=0:
            self.helper(i+1,j,path+'(',num+1)
        if j<self.n and num-1>=0:
            self.helper(i,j+1,path+')',num-1)
        if j==self.n and i==self.n:
            self.ans.append(path)
            
        
            
        
            
        