Given a binary search tree, write a function kthSmallest to find the kth smallest element in it.

Note: 
You may assume k is always valid, 1 ? k ? BST's total elements.

Follow up:
What if the BST is modified (insert/delete operations) often and you need to find the kth smallest frequently? How would you optimize the kthSmallest routine?

Credits:
Special thanks to @ts for adding this problem and creating all test cases.









# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def kthSmallest(self, root, k):
        """
        :type root: TreeNode
        :type k: int
        :rtype: int
        """
        count=0
        
        self.stack=[]
        self.push(root)
        
        while self.stack:
            node=self.stack.pop()
            count=count+1
            if count==k:
                return node.val
            if node.right:
                self.push(node.right)
        return
        
        
    def push(self,node):
        while node:
            self.stack.append(node)
            node=node.left