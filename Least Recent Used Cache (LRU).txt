Design and implement a data structure for Least Recently Used (LRU) cache. It should support the following operations: get and put.

get(key) - Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1.
put(key, value) - Set or insert the value if the key is not already present. When the cache reached its capacity, it should invalidate the least recently used item before inserting a new item.

Follow up:
Could you do both operations in O(1) time complexity?

Example:

LRUCache cache = new LRUCache( 2 /* capacity */ );

cache.put(1, 1);
cache.put(2, 2);
cache.get(1);       // returns 1
cache.put(3, 3);    // evicts key 2
cache.get(2);       // returns -1 (not found)
cache.put(4, 4);    // evicts key 1
cache.get(1);       // returns -1 (not found)
cache.get(3);       // returns 3
cache.get(4);       // returns 4











class node:
    def __init__(self,key,val):
        self.next=None
        self.prev=None
        self.val=val
        self.key=key
class LRUCache(object):

    def __init__(self, capacity):
        """
        :type capacity: int
        """
        self.dic={}
        self.head=node(0,0)
        self.tail=node(0,0)
        self.head.next=self.tail
        self.tail.prev=self.head
        self.capacity=capacity

    def get(self, key):
        """
        :type key: int
        :rtype: int
        """
        if key in self.dic:
            node=self.dic[key]
            value=node.val
            prev=node.prev
            next=node.next
            prev.next=next
            next.prev=prev
            self.add(key,value)
            return value
        else:
            return -1
        

    def put(self, key, value):
        """
        :type key: int
        :type value: int
        :rtype: void
        """
        if key in self.dic:
            node=self.dic[key]
            prev=node.prev
            next=node.next
            prev.next=next
            next.prev=prev
            self.add(key,value)
            
        elif len(self.dic)==self.capacity:
            self.remove()
            self.add(key,value)
        
        else:
            self.add(key,value)
            
        
    def remove(self):
        first=self.head.next
        del self.dic[first.key]
        new_first=first.next
        self.head.next=new_first
        new_first.prev=self.head

    def add(self,key,val):
        new=node(key,val)
        self.dic[key]=new
        prev=self.tail.prev
        prev.next=new
        new.next=self.tail
        new.prev=prev
        self.tail.prev=new
    
        
        

# Your LRUCache object will be instantiated and called as such:
# obj = LRUCache(capacity)
# param_1 = obj.get(key)
# obj.put(key,value)