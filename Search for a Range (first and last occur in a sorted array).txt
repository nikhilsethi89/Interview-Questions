Given an array of integers sorted in ascending order, find the starting and ending position of a given target value.

Your algorithm's runtime complexity must be in the order of O(log n).

If the target is not found in the array, return [-1, -1].

For example,
Given [5, 7, 7, 8, 8, 10] and target value 8,
return [3, 4].





class Solution(object):
    def searchRange(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[int]
        """
        
        if nums==[]:
            return [-1,-1]
            
        
        self.nums=nums
        self.target=target
        return [self.first_occur(0,len(nums)-1),self.last_occur(0,len(nums)-1)]
    
    def first_occur(self,i,j):
        
        if i>j:
            return -1
        
        if i==j:
            if self.nums[i]!=self.target:
                return -1
            else:
                return i
        
        mid=(i+j)/2
        if self.nums[mid]==self.target and (mid==i or self.nums[mid]>self.nums[mid-1]):
            return mid
        if self.nums[mid]>=self.target:
            return self.first_occur(i,mid-1)
        else:
            return self.first_occur(mid+1,j)
            
    def last_occur(self,i,j):
        
        if i>j:
            return -1
        
        if i==j:
            if self.nums[i]!=self.target:
                return -1
            else:
                return i
        
        mid=(i+j)/2
        if self.nums[mid]==self.target and (mid==j or self.nums[mid+1]>self.nums[mid]):
            return mid
        if self.nums[mid]<=self.target:
            return self.last_occur(mid+1,j)
        else:
            return self.last_occur(i,mid-1)
             